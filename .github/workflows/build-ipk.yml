name: Build sing-box IPK packages

on:
  workflow_dispatch:
  release:
    types: [created] # Запускается, когда ты создаёшь релиз вручную
  push:
    tags:
      - 'R*'
      
      
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-ipk:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm64, mipsle]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y tar gzip jq

    - name: Determine version
      id: version
      run: |
        VERSION=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases/latest | jq -r '.tag_name' | sed 's/^v//')
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Using version: ${VERSION}"

    - name: Download sing-box
      run: |
        wget https://github.com/SagerNet/sing-box/releases/download/v${{ steps.version.outputs.version }}/sing-box-${{ steps.version.outputs.version }}-linux-${{ matrix.arch }}.tar.gz

    - name: Create IPK package structure
      run: |
        mkdir -p sing-box-${{ steps.version.outputs.version }}-${{ matrix.arch }}/opt/sbin
        mkdir -p sing-box-${{ steps.version.outputs.version }}-${{ matrix.arch }}/opt/etc/init.d
        mkdir -p sing-box-${{ steps.version.outputs.version }}-${{ matrix.arch }}/opt/etc/sing-box/configs
        mkdir -p sing-box-${{ steps.version.outputs.version }}-${{ matrix.arch }}/CONTROL

        tar -xzf sing-box-${{ steps.version.outputs.version }}-linux-${{ matrix.arch }}.tar.gz -C sing-box-${{ steps.version.outputs.version }}-${{ matrix.arch }}/opt/sbin --strip-components=1

        cat > sing-box-${{ steps.version.outputs.version }}-${{ matrix.arch }}/opt/etc/init.d/S97sing-box <<EOF
        #!/bin/sh /etc/rc.common

        START=99
        STOP=10

        start() {
            /opt/sbin/sing-box run -c /opt/etc/sing-box/config.json &
        }

        stop() {
            killall sing-box
        }
        EOF

        chmod +x sing-box-${{ steps.version.outputs.version }}-${{ matrix.arch }}/opt/etc/init.d/S97sing-box

        cat > sing-box-${{ steps.version.outputs.version }}-${{ matrix.arch }}/CONTROL/control <<EOF
        Package: sing-box
        Depends: libc, libssp, librt, libpthread, libpthread
        Version: ${{ steps.version.outputs.version }}
        Architecture: mipsel-3.4
        Maintainer: GitHub Actions <actions@github.com>
        Section: net
        Description: The universal proxy platform.
        EOF

    - name: Package IPK
      run: |
        cd sing-box-${{ steps.version.outputs.version }}-${{ matrix.arch }}
        mv opt/sbin/LICENSE opt/etc/sing-box/
        tar -czf ../data.tar.gz ./opt/sbin ./opt/etc
        cd ./CONTROL
        tar -czf ../../control.tar.gz *
        cd ..
        echo "2.0" > ../debian-binary
        cd ..
        tar -czf sing-box_${{ steps.version.outputs.version }}_${{ matrix.arch }}.ipk ./debian-binary ./control.tar.gz ./data.tar.gz
        
    - name: Bump version file
      uses: francktrouillez/auto-bump-version-file@v1
      with:
        file: 'VERSION'

    - name: Display artifacts
      run: |
        ls -al ./
        ls -aR ./
        
    - name: Set environment variable
      run: echo "MY_ENV_VAR=myValue" >> $GITHUB_ENV

    - name: Use environment variable
      run: |
        echo "The value of MY_ENV_VAR is $MY_ENV_VAR"

    - name: Store build timestamp
      run: echo "BUILD_TIME=$(date +'%T')" >> $GITHUB_ENV

    - name: Deploy using stored timestamp
      run: echo "Deploying at $BUILD_TIME"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sing-box-${{ matrix.arch }} 
        path: ./*.ipk
        if-no-files-found: error

  deploy-repository:
    runs-on: ubuntu-latest
    needs: [build-ipk]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version from VERSION file
        id: generate_tag
        run: |
          get_clean_json() {
            awk '
            BEGIN { in_string = 0 }
            {
              line = $0
              result = ""
              for (i = 1; i <= length(line); i++) {
              char = substr(line, i, 1)
              next_char = substr(line, i+1, 1)
              if (char == "\"" && prev != "\\") {
              in_string = !in_string
            }
              if (!in_string && char == "/" && next_char == "/") {
              break
            }
              result = result char
              prev = char
            }
              print result
            }' "$1"
          }
          
          js_SETTING=$(get_clean_json etc/swave/settings.json | jq -c '.' 2>/dev/null)
          TAG_NAME="v$(echo "$js_SETTING" | jq -r '.app.version')"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Create Git tag and push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.generate_tag.outputs.tag_name }}
          git push origin ${{ steps.generate_tag.outputs.tag_name }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release and upload artifacts (signed)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${{ steps.generate_tag.outputs.tag_name }}

          # Найдём предыдущий тег по дате создания
          PREV_TAG=$(git tag --sort=-creatordate | grep -v "^${TAG}$" | head -n 1 || echo "")

          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found. Logging all history."
            git log --pretty=format:'- [%h](https://github.com/${{ github.repository }}/commit/%H): %s' > changelog.txt
          else
            echo "Generating changelog from $PREV_TAG to HEAD"
            git log "$PREV_TAG"..HEAD --pretty=format:'- [%h](https://github.com/${{ github.repository }}/commit/%H): %s' > changelog.txt
          fi

          echo "Changelog:"
          cat changelog.txt

          gh release create "$TAG" artifacts/sing-box-*/sing-box_*.ipk \
            --repo "$GITHUB_REPOSITORY" \
            --title "Release $TAG" \
            --notes-file changelog.txt



